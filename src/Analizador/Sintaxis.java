
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 22 11:52:02 COT 2020
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 22 11:52:02 COT 2020
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\003\010\000\002\003" +
    "\007\000\002\003\007\000\002\003\006\000\002\003\003" +
    "\000\002\002\011\000\002\002\010\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\005\000\002\004\004\000\002\004\003\000\002" +
    "\005\005\000\002\005\007\000\002\005\011\000\002\005" +
    "\007\000\002\005\011\000\002\005\007\000\002\005\011" +
    "\000\002\005\006\000\002\005\006\000\002\005\005\000" +
    "\002\005\007\000\002\005\011\000\002\005\007\000\002" +
    "\005\011\000\002\005\007\000\002\005\011\000\002\005" +
    "\006\000\002\005\006\000\002\005\010\000\002\005\010" +
    "\000\002\005\011\000\002\005\011\000\002\006\005\000" +
    "\002\006\003\000\002\022\006\000\002\022\007\000\002" +
    "\023\005\000\002\023\011\000\002\023\007\000\002\024" +
    "\010\000\002\024\007\000\002\024\007\000\002\024\006" +
    "\000\002\024\005\000\002\024\004\000\002\021\005\000" +
    "\002\021\005\000\002\021\005\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\010\011\000\002\017\005\000\002\017\003" +
    "\000\002\017\007\000\002\017\005\000\002\017\007\000" +
    "\002\017\005\000\002\017\007\000\002\017\005\000\002" +
    "\017\010\000\002\017\006\000\002\017\011\000\002\017" +
    "\007\000\002\011\015\000\002\012\013\000\002\013\011" +
    "\000\002\013\011\000\002\013\002\000\002\014\011\000" +
    "\002\015\013\000\002\016\011\000\002\020\012\000\002" +
    "\020\011\000\002\007\005\000\002\007\004\000\002\007" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\012\021\007\027\010\031\004\053\006\001" +
    "\002\000\004\032\u0103\001\002\000\004\002\u0102\001\002" +
    "\000\004\045\375\001\002\000\004\053\017\001\002\000" +
    "\004\005\012\001\002\000\004\002\ufffc\001\002\000\004" +
    "\030\013\001\002\000\004\005\014\001\002\000\004\054" +
    "\015\001\002\000\014\002\uffff\021\007\027\010\031\004" +
    "\053\006\001\002\000\004\002\000\001\002\000\004\045" +
    "\020\001\002\000\004\046\021\001\002\000\004\051\022" +
    "\001\002\000\030\006\035\007\036\010\037\012\041\017" +
    "\044\020\023\021\031\034\034\035\040\036\046\037\042" +
    "\001\002\000\004\045\342\001\002\000\036\006\uffec\007" +
    "\uffec\010\uffec\012\uffec\014\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\034\uffec\035\uffec\036\uffec\037\uffec\052\uffec\001" +
    "\002\000\036\006\ufff8\007\ufff8\010\ufff8\012\ufff8\014\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\021\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\052\ufff8\001\002\000\034\006\035\007\036" +
    "\010\037\012\041\016\116\017\044\020\023\021\031\034" +
    "\034\035\040\036\046\037\042\052\341\001\002\000\036" +
    "\006\ufff6\007\ufff6\010\ufff6\012\ufff6\014\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\052\ufff6\001\002\000\036\006\uffee\007\uffee\010\uffee\012" +
    "\uffee\014\uffee\016\uffee\017\uffee\020\uffee\021\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\052\uffee\001\002\000\006\043" +
    "\310\060\311\001\002\000\036\006\ufff2\007\ufff2\010\ufff2" +
    "\012\ufff2\014\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\037\ufff2\052\ufff2\001\002\000\036" +
    "\006\ufff0\007\ufff0\010\ufff0\012\ufff0\014\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\052\ufff0\001\002\000\004\041\305\001\002\000\006\043" +
    "\235\060\236\001\002\000\004\060\216\001\002\000\004" +
    "\045\204\001\002\000\004\041\170\001\002\000\004\045" +
    "\143\001\002\000\004\045\132\001\002\000\036\006\ufff4" +
    "\007\ufff4\010\ufff4\012\ufff4\014\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\052\ufff4" +
    "\001\002\000\004\045\053\001\002\000\036\006\uffe9\007" +
    "\uffe9\010\uffe9\012\uffe9\014\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\052\uffe9\001" +
    "\002\000\004\045\047\001\002\000\004\060\050\001\002" +
    "\000\004\046\051\001\002\000\004\054\052\001\002\000" +
    "\036\006\uffcf\007\uffcf\010\uffcf\012\uffcf\014\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\052\uffcf\001\002\000\006\044\055\060\056\001\002" +
    "\000\004\046\103\001\002\000\010\040\101\046\uffbb\054" +
    "\uffbb\001\002\000\004\041\057\001\002\000\012\005\061" +
    "\044\062\060\063\061\060\001\002\000\010\040\077\046" +
    "\uffb7\054\uffb7\001\002\000\006\005\070\060\071\001\002" +
    "\000\010\040\066\046\uffb9\054\uffb9\001\002\000\010\040" +
    "\064\046\uffb5\054\uffb5\001\002\000\006\044\055\060\056" +
    "\001\002\000\006\046\uffb6\054\uffb6\001\002\000\006\044" +
    "\055\060\056\001\002\000\006\046\uffba\054\uffba\001\002" +
    "\000\010\040\075\046\uffb3\054\uffb3\001\002\000\004\005" +
    "\072\001\002\000\010\040\073\046\uffb1\054\uffb1\001\002" +
    "\000\006\044\055\060\056\001\002\000\006\046\uffb2\054" +
    "\uffb2\001\002\000\006\044\055\060\056\001\002\000\006" +
    "\046\uffb4\054\uffb4\001\002\000\006\044\055\060\056\001" +
    "\002\000\006\046\uffb8\054\uffb8\001\002\000\006\044\055" +
    "\060\056\001\002\000\006\046\uffbc\054\uffbc\001\002\000" +
    "\004\051\104\001\002\000\030\006\035\007\036\010\037" +
    "\012\041\017\044\020\023\021\031\034\034\035\040\036" +
    "\046\037\042\001\002\000\034\006\035\007\036\010\037" +
    "\012\041\016\116\017\044\020\023\021\031\034\034\035" +
    "\040\036\046\037\042\052\107\001\002\000\036\006\uffed" +
    "\007\uffed\010\uffed\012\uffed\014\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\034\uffed\035\uffed\036\uffed\037\uffed\052\uffed" +
    "\001\002\000\036\006\uffab\007\uffab\010\uffab\012\uffab\014" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\052\uffab\001\002\000\036\006\ufff9\007" +
    "\ufff9\010\ufff9\012\ufff9\014\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\052\ufff9\001" +
    "\002\000\036\006\ufff7\007\ufff7\010\ufff7\012\ufff7\014\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\037\ufff7\052\ufff7\001\002\000\036\006\uffef\007\uffef" +
    "\010\uffef\012\uffef\014\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\052\uffef\001\002" +
    "\000\036\006\ufff3\007\ufff3\010\ufff3\012\ufff3\014\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\034\ufff3\035\ufff3\036\ufff3" +
    "\037\ufff3\052\ufff3\001\002\000\036\006\ufff1\007\ufff1\010" +
    "\ufff1\012\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\037\ufff1\052\ufff1\001\002\000" +
    "\004\016\116\001\002\000\004\051\121\001\002\000\036" +
    "\006\ufff5\007\ufff5\010\ufff5\012\ufff5\014\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\052\ufff5\001\002\000\036\006\uffea\007\uffea\010\uffea\012" +
    "\uffea\014\uffea\016\uffea\017\uffea\020\uffea\021\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\052\uffea\001\002\000\030\006" +
    "\035\007\036\010\037\012\041\017\044\020\023\021\031" +
    "\034\034\035\040\036\046\037\042\001\002\000\034\006" +
    "\035\007\036\010\037\012\041\016\116\017\044\020\023" +
    "\021\031\034\034\035\040\036\046\037\042\052\123\001" +
    "\002\000\004\017\124\001\002\000\004\045\125\001\002" +
    "\000\006\044\055\060\056\001\002\000\004\046\127\001" +
    "\002\000\004\054\130\001\002\000\036\006\uffaa\007\uffaa" +
    "\010\uffaa\012\uffaa\014\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\052\uffaa\001\002" +
    "\000\036\006\uffeb\007\uffeb\010\uffeb\012\uffeb\014\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\052\uffeb\001\002\000\006\005\133\060\134\001" +
    "\002\000\004\060\137\001\002\000\004\046\135\001\002" +
    "\000\004\054\136\001\002\000\036\006\uffcc\007\uffcc\010" +
    "\uffcc\012\uffcc\014\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\052\uffcc\001\002\000" +
    "\004\005\140\001\002\000\004\046\141\001\002\000\004" +
    "\054\142\001\002\000\036\006\uffcd\007\uffcd\010\uffcd\012" +
    "\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\052\uffcd\001\002\000\004\060" +
    "\144\001\002\000\004\046\145\001\002\000\004\051\146" +
    "\001\002\000\006\013\147\015\uffac\001\002\000\006\060" +
    "\155\061\154\001\002\000\004\015\151\001\002\000\030" +
    "\006\035\007\036\010\037\012\041\017\044\020\023\021" +
    "\031\034\034\035\040\036\046\037\042\001\002\000\034" +
    "\006\035\007\036\010\037\012\041\016\116\017\044\020" +
    "\023\021\031\034\034\035\040\036\046\037\042\052\153" +
    "\001\002\000\036\006\uffaf\007\uffaf\010\uffaf\012\uffaf\014" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\052\uffaf\001\002\000\004\055\163\001" +
    "\002\000\004\055\156\001\002\000\030\006\035\007\036" +
    "\010\037\012\041\017\044\020\023\021\031\034\034\035" +
    "\040\036\046\037\042\001\002\000\034\006\035\007\036" +
    "\010\037\012\041\014\160\016\116\017\044\020\023\021" +
    "\031\034\034\035\040\036\046\037\042\001\002\000\004" +
    "\054\161\001\002\000\006\013\147\015\uffac\001\002\000" +
    "\004\015\uffad\001\002\000\030\006\035\007\036\010\037" +
    "\012\041\017\044\020\023\021\031\034\034\035\040\036" +
    "\046\037\042\001\002\000\034\006\035\007\036\010\037" +
    "\012\041\014\165\016\116\017\044\020\023\021\031\034" +
    "\034\035\040\036\046\037\042\001\002\000\004\054\166" +
    "\001\002\000\006\013\147\015\uffac\001\002\000\004\015" +
    "\uffae\001\002\000\006\005\173\060\174\001\002\000\004" +
    "\054\172\001\002\000\036\006\uffce\007\uffce\010\uffce\012" +
    "\uffce\014\uffce\016\uffce\017\uffce\020\uffce\021\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\052\uffce\001\002\000\004\060" +
    "\176\001\002\000\006\041\170\054\uffc6\001\002\000\004" +
    "\054\uffc7\001\002\000\006\004\200\005\177\001\002\000" +
    "\006\041\170\054\uffc8\001\002\000\004\005\201\001\002" +
    "\000\006\041\170\054\uffca\001\002\000\004\054\uffcb\001" +
    "\002\000\004\054\uffc9\001\002\000\006\044\055\060\056" +
    "\001\002\000\004\046\206\001\002\000\004\051\207\001" +
    "\002\000\030\006\035\007\036\010\037\012\041\017\044" +
    "\020\023\021\031\034\034\035\040\036\046\037\042\001" +
    "\002\000\034\006\035\007\036\010\037\012\041\016\116" +
    "\017\044\020\023\021\031\034\034\035\040\036\046\037" +
    "\042\052\211\001\002\000\040\006\uffbd\007\uffbd\010\uffbd" +
    "\011\212\012\uffbd\014\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\052\uffbd\001\002" +
    "\000\004\051\213\001\002\000\030\006\035\007\036\010" +
    "\037\012\041\017\044\020\023\021\031\034\034\035\040" +
    "\036\046\037\042\001\002\000\034\006\035\007\036\010" +
    "\037\012\041\016\116\017\044\020\023\021\031\034\034" +
    "\035\040\036\046\037\042\052\215\001\002\000\036\006" +
    "\uffb0\007\uffb0\010\uffb0\012\uffb0\014\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\052" +
    "\uffb0\001\002\000\006\022\220\042\217\001\002\000\004" +
    "\005\227\001\002\000\004\005\221\001\002\000\006\005" +
    "\222\060\223\001\002\000\004\054\226\001\002\000\004" +
    "\005\224\001\002\000\004\054\225\001\002\000\036\006" +
    "\uffd3\007\uffd3\010\uffd3\012\uffd3\014\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\052" +
    "\uffd3\001\002\000\036\006\uffd5\007\uffd5\010\uffd5\012\uffd5" +
    "\014\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\052\uffd5\001\002\000\006\005\230" +
    "\060\231\001\002\000\004\054\234\001\002\000\004\005" +
    "\232\001\002\000\004\054\233\001\002\000\036\006\uffd4" +
    "\007\uffd4\010\uffd4\012\uffd4\014\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\052\uffd4" +
    "\001\002\000\036\006\uffd6\007\uffd6\010\uffd6\012\uffd6\014" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\052\uffd6\001\002\000\004\060\303\001" +
    "\002\000\012\022\242\042\237\043\241\054\240\001\002" +
    "\000\004\061\276\001\002\000\036\006\uffdf\007\uffdf\010" +
    "\uffdf\012\uffdf\014\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\052\uffdf\001\002\000" +
    "\004\054\275\001\002\000\006\047\244\061\243\001\002" +
    "\000\016\023\261\024\257\025\262\026\255\054\256\056" +
    "\260\001\002\000\004\061\247\001\002\000\004\054\246" +
    "\001\002\000\036\006\uffdc\007\uffdc\010\uffdc\012\uffdc\014" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\034\uffdc\035\uffdc" +
    "\036\uffdc\037\uffdc\052\uffdc\001\002\000\006\050\uffd1\057" +
    "\253\001\002\000\004\050\251\001\002\000\004\054\252" +
    "\001\002\000\036\006\uffdb\007\uffdb\010\uffdb\012\uffdb\014" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\034\uffdb\035\uffdb" +
    "\036\uffdb\037\uffdb\052\uffdb\001\002\000\004\061\247\001" +
    "\002\000\004\050\uffd2\001\002\000\004\061\273\001\002" +
    "\000\036\006\uffda\007\uffda\010\uffda\012\uffda\014\uffda\016" +
    "\uffda\017\uffda\020\uffda\021\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\052\uffda\001\002\000\004\061\271\001\002\000" +
    "\004\061\267\001\002\000\004\061\265\001\002\000\004" +
    "\061\263\001\002\000\014\023\261\024\257\025\262\026" +
    "\255\054\uffc0\001\002\000\004\054\uffc1\001\002\000\014" +
    "\023\261\024\257\025\262\026\255\054\uffc4\001\002\000" +
    "\004\054\uffc5\001\002\000\004\054\270\001\002\000\036" +
    "\006\uffd9\007\uffd9\010\uffd9\012\uffd9\014\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\052\uffd9\001\002\000\014\023\261\024\257\025\262\026" +
    "\255\054\uffc2\001\002\000\004\054\uffc3\001\002\000\014" +
    "\023\261\024\257\025\262\026\255\054\uffbe\001\002\000" +
    "\004\054\uffbf\001\002\000\036\006\uffd8\007\uffd8\010\uffd8" +
    "\012\uffd8\014\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\034" +
    "\uffd8\035\uffd8\036\uffd8\037\uffd8\052\uffd8\001\002\000\006" +
    "\054\277\056\300\001\002\000\036\006\uffde\007\uffde\010" +
    "\uffde\012\uffde\014\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\052\uffde\001\002\000" +
    "\004\061\301\001\002\000\004\054\302\001\002\000\036" +
    "\006\uffdd\007\uffdd\010\uffdd\012\uffdd\014\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\052\uffdd\001\002\000\004\054\304\001\002\000\036\006" +
    "\uffd7\007\uffd7\010\uffd7\012\uffd7\014\uffd7\016\uffd7\017\uffd7" +
    "\020\uffd7\021\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\052" +
    "\uffd7\001\002\000\004\060\306\001\002\000\004\054\307" +
    "\001\002\000\036\006\uffd0\007\uffd0\010\uffd0\012\uffd0\014" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\052\uffd0\001\002\000\004\060\337\001" +
    "\002\000\012\022\315\042\312\043\314\054\313\001\002" +
    "\000\004\061\332\001\002\000\036\006\uffe8\007\uffe8\010" +
    "\uffe8\012\uffe8\014\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\052\uffe8\001\002\000" +
    "\004\054\331\001\002\000\006\047\317\061\316\001\002" +
    "\000\016\023\261\024\257\025\262\026\255\054\325\056" +
    "\326\001\002\000\004\061\247\001\002\000\004\054\321" +
    "\001\002\000\036\006\uffe5\007\uffe5\010\uffe5\012\uffe5\014" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\052\uffe5\001\002\000\004\050\323\001" +
    "\002\000\004\054\324\001\002\000\036\006\uffe4\007\uffe4" +
    "\010\uffe4\012\uffe4\014\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\052\uffe4\001\002" +
    "\000\036\006\uffe3\007\uffe3\010\uffe3\012\uffe3\014\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\052\uffe3\001\002\000\004\061\327\001\002\000" +
    "\004\054\330\001\002\000\036\006\uffe2\007\uffe2\010\uffe2" +
    "\012\uffe2\014\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\052\uffe2\001\002\000\036" +
    "\006\uffe1\007\uffe1\010\uffe1\012\uffe1\014\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\021\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\052\uffe1\001\002\000\006\054\333\056\334\001\002\000" +
    "\036\006\uffe7\007\uffe7\010\uffe7\012\uffe7\014\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\052\uffe7\001\002\000\004\061\335\001\002\000\004" +
    "\054\336\001\002\000\036\006\uffe6\007\uffe6\010\uffe6\012" +
    "\uffe6\014\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\052\uffe6\001\002\000\004\054" +
    "\340\001\002\000\036\006\uffe0\007\uffe0\010\uffe0\012\uffe0" +
    "\014\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\052\uffe0\001\002\000\004\002\ufffb" +
    "\001\002\000\006\006\344\060\345\001\002\000\004\046" +
    "\371\001\002\000\004\060\362\001\002\000\004\022\346" +
    "\001\002\000\004\061\347\001\002\000\004\054\350\001" +
    "\002\000\006\044\055\060\056\001\002\000\004\054\352" +
    "\001\002\000\006\043\355\060\354\001\002\000\004\046" +
    "\uffa7\001\002\000\006\042\357\043\360\001\002\000\004" +
    "\060\356\001\002\000\004\046\uffa4\001\002\000\004\061" +
    "\361\001\002\000\004\046\uffa5\001\002\000\004\046\uffa6" +
    "\001\002\000\004\022\363\001\002\000\004\061\364\001" +
    "\002\000\004\054\365\001\002\000\006\044\055\060\056" +
    "\001\002\000\004\054\367\001\002\000\006\043\355\060" +
    "\354\001\002\000\004\046\uffa8\001\002\000\004\051\372" +
    "\001\002\000\030\006\035\007\036\010\037\012\041\017" +
    "\044\020\023\021\031\034\034\035\040\036\046\037\042" +
    "\001\002\000\034\006\035\007\036\010\037\012\041\016" +
    "\116\017\044\020\023\021\031\034\034\035\040\036\046" +
    "\037\042\052\374\001\002\000\036\006\uffa9\007\uffa9\010" +
    "\uffa9\012\uffa9\014\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\034\uffa9\035\uffa9\036\uffa9\037\uffa9\052\uffa9\001\002\000" +
    "\004\046\376\001\002\000\004\051\377\001\002\000\030" +
    "\006\035\007\036\010\037\012\041\017\044\020\023\021" +
    "\031\034\034\035\040\036\046\037\042\001\002\000\034" +
    "\006\035\007\036\010\037\012\041\016\116\017\044\020" +
    "\023\021\031\034\034\035\040\036\046\037\042\052\u0101" +
    "\001\002\000\004\002\ufffa\001\002\000\004\002\001\001" +
    "\002\000\004\033\u0104\001\002\000\004\054\u0105\001\002" +
    "\000\014\002\ufffd\021\007\027\010\031\004\053\006\001" +
    "\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\006\002\010\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\010\003\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\025\005\024\010\031" +
    "\011\032\012\027\014\023\016\044\022\026\023\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\005\107\010\112\011\113\012\111\014\105\015" +
    "\114\016\117\022\110\023\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\064\001\001\000\002\001\001\000\004\017\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\073\001\001\000\002" +
    "\001\001\000\004\017\075\001\001\000\002\001\001\000" +
    "\004\017\077\001\001\000\002\001\001\000\004\017\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\104\005\024\010\031\011\032\012\027\014\023\016\044" +
    "\022\026\023\042\001\001\000\024\005\107\010\112\011" +
    "\113\012\111\014\105\015\114\016\117\022\110\023\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\121" +
    "\005\024\010\031\011\032\012\027\014\023\016\044\022" +
    "\026\023\042\001\001\000\024\005\107\010\112\011\113" +
    "\012\111\014\105\015\114\016\117\022\110\023\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\151\005\024\010\031\011\032\012" +
    "\027\014\023\016\044\022\026\023\042\001\001\000\024" +
    "\005\107\010\112\011\113\012\111\014\105\015\114\016" +
    "\117\022\110\023\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\156\005\024\010" +
    "\031\011\032\012\027\014\023\016\044\022\026\023\042" +
    "\001\001\000\024\005\107\010\112\011\113\012\111\014" +
    "\105\015\114\016\117\022\110\023\116\001\001\000\002" +
    "\001\001\000\004\013\161\001\001\000\002\001\001\000" +
    "\024\004\163\005\024\010\031\011\032\012\027\014\023" +
    "\016\044\022\026\023\042\001\001\000\024\005\107\010" +
    "\112\011\113\012\111\014\105\015\114\016\117\022\110" +
    "\023\116\001\001\000\002\001\001\000\004\013\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\202" +
    "\001\001\000\002\001\001\000\004\024\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\207\005" +
    "\024\010\031\011\032\012\027\014\023\016\044\022\026" +
    "\023\042\001\001\000\024\005\107\010\112\011\113\012" +
    "\111\014\105\015\114\016\117\022\110\023\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\213\005" +
    "\024\010\031\011\032\012\027\014\023\016\044\022\026" +
    "\023\042\001\001\000\024\005\107\010\112\011\113\012" +
    "\111\014\105\015\114\016\117\022\110\023\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\244\001\001\000" +
    "\002\001\001\000\004\006\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\253\001\001" +
    "\000\002\001\001\000\004\021\273\001\001\000\002\001" +
    "\001\000\004\021\271\001\001\000\002\001\001\000\004" +
    "\021\265\001\001\000\004\021\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\317\001\001\000\002\001\001\000\004\006\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\342\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\350\001\001" +
    "\000\002\001\001\000\004\007\352\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\365\001\001\000\002\001\001\000\004\007\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\372" +
    "\005\024\010\031\011\032\012\027\014\023\016\044\022" +
    "\026\023\042\001\001\000\024\005\107\010\112\011\113" +
    "\012\111\014\105\015\114\016\117\022\110\023\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\377\005\024\010\031\011\032\012\027\014" +
    "\023\016\044\022\026\023\042\001\001\000\024\005\107" +
    "\010\112\011\113\012\111\014\105\015\114\016\117\022" +
    "\110\023\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\010\003" +
    "\u0105\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARACION_FOR ::= Op_incremento Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARACION_FOR ::= Identificador Op_incremento 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARACION_FOR ::= Identificador Op_atribucion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_FOR ::= Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_FOR ::= T_dato Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-7)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Corchete_a SENTENCIA Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DO_WHILE ::= Do Corchete_a SENTENCIA Corchete_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Corchete_a SENTENCIA Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASE ::= 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASE ::= Case Identificador Dos_puntos SENTENCIA Break P_coma CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CASE ::= Case Numero Dos_puntos SENTENCIA Break P_coma CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("CASE",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Corchete_a CASE Default SENTENCIA Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Corchete_a SENTENCIA Corchete_c Else Corchete_a SENTENCIA Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Identificador Comillas Op_logico SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Comillas Comillas Op_logico SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Identificador Op_logico SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Numero Op_logico SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= Identificador Op_relacional Op_booleano Op_logico SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_BOOLEANA ::= Op_booleano Op_logico SENTENCIA_BOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Corchete_a SENTENCIA Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACION ::= Numero Division Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACION ::= Numero Division OPERACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPERACION ::= Numero Multiplicacion Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPERACION ::= Numero Multiplicacion OPERACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPERACION ::= Numero Resta Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERACION ::= Numero Resta OPERACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERACION ::= Numero Suma Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERACION ::= Numero Suma OPERACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERACION",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // COUT ::= Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COUT ::= Op_relacional Identificador COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COUT ::= Op_relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COUT ::= Op_relacional Comillas Identificador Comillas COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COUT ::= Op_relacional Comillas Identificador Linea Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COUT ::= Op_relacional Comillas Identificador Linea Comillas COUT 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("COUT",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ESCRITURA ::= Printf Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ESCRITURA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ESCRITURA ::= Printf Parentesis_a Comillas Identificador Comillas Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ESCRITURA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ESCRITURA ::= Cout COUT P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ESCRITURA",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LECTURA ::= Scanf Parentesis_a Identificador Parentesis_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LECTURA",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LECTURA ::= Cin Op_relacional Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LECTURA",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARREGLO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ARREGLO",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARREGLO ::= Numero Coma ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("ARREGLO",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Cadena Identificador Igual Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Cadena Identificador Igual Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Cadena Identificador Op_atribucion Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= T_dato Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= T_dato Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= T_dato Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= T_dato Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= T_dato Identificador Igual Llave_a ARREGLO Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= T_dato Identificador Igual OPERACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= T_dato Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= T_dato Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= T_dato Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Int Op_incremento Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Int Identificador Op_incremento P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Int Identificador Igual Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Int Identificador Igual Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Int Identificador Igual Llave_a ARREGLO Llave_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Int Identificador Igual OPERACION P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Int Identificador Op_atribucion Numero Punto Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Int Identificador Op_atribucion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SENTENCIA DO_WHILE DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= SENTENCIA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA LECTURA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= Main Parentesis_a Parentesis_c Corchete_a SENTENCIA Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Int Main Parentesis_a Parentesis_c Corchete_a SENTENCIA Corchete_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LIBRERIA ::= INICIO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LIBRERIA ::= Using Namespace Std P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LIBRERIA ::= Using Namespace Std P_coma LIBRERIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LIBRERIA ::= Include Comillas Iostream Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // LIBRERIA ::= Include Comillas Iostream Comillas P_coma LIBRERIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("LIBRERIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= LIBRERIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

